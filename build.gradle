buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'java'

group 'ckcsc.asadfgglie'
version '1.4.3'

Directory AppDir = layout.getProjectDirectory().dir("App")
Directory resourceDir = layout.getProjectDirectory().dir("resource")
Directory AppVersionLibsDir = layout.getProjectDirectory().dir("AppVersionLibs")

repositories {
    mavenCentral()

    maven {
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.22.0'

    // https://mvnrepository.com/artifact/net.dv8tion/JDA
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation group: 'net.dv8tion', name: 'JDA', version: '5.0.0-alpha.3'
    // https://mvnrepository.com/artifact/org.json/json
    implementation group: 'org.json', name: 'json', version: '20211205'
    // https://github.com/sedmelluq/LavaPlayer#maven-package
    implementation 'com.sedmelluq:lavaplayer:1.3.77'
    // https://mvnrepository.com/artifact/org.tensorflow/tensorflow
    implementation group: 'org.tensorflow', name: 'tensorflow', version: '1.15.0'
}

test {
    useJUnitPlatform()
}

jar {
    manifestContentCharset "utf-8"
    metadataCharset 'utf-8'

    manifest.attributes(
        "Main-Class": "ckcsc/asadfgglie/setup/SetUp",
        "Implementation-Version": project.version
    )
}

tasks.register("refreshResource", Copy){
    FileCollection deleteCollection = AppDir.files(AppDir.asFile.listFiles())
    delete deleteCollection.asFileTree.matching {
        exclude "${rootProject.name}-all.jar"
        include "**/*"
    }
    println "Refresh App's resource."
    from resourceDir
    into AppDir
}

tasks.register('BuildApp', Copy){
    dependsOn tasks.refreshResource

    from tasks.shadowJar
    if(AppDir.file("${rootProject.name}-all.jar").asFile.exists()){
        delete AppDir.asFileTree.matching{
            include "${rootProject.name}-all.jar"
        }
    }
    rename "${rootProject.name}-${version}-all.jar", "${rootProject.name}-all.jar"
    into AppDir

    delete AppDir.asFileTree.matching{
        include "*.jar"
        exclude "${rootProject.name}-all.jar"
    }
}

tasks.register("saveNewVersion", Copy){
    dependsOn tasks.shadowJar
    from layout.buildDirectory.dir("libs")
    layout.buildDirectory.dir("libs").get().asFileTree.forEach({file ->
        AppVersionLibsDir.getAsFileTree().forEach({already ->
            if(already.name == file.name){
                exclude file.name
                println "Already has ${file.name}."
            }
        })
    })
    into AppVersionLibsDir
}

tasks.register('packageApp', Zip) {
    dependsOn tasks.BuildApp

    archiveFileName = "App.zip"
    destinationDirectory = layout.projectDirectory

    from AppDir
}